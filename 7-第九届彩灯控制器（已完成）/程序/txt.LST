C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TXT
OBJECT MODULE PLACED IN txt.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE txt.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "reg52.h"
   2          #include "iic.h"
   3          #include "intrins.h"
   4          sfr AUXR = 0x8e;
   5          #define uchar unsigned char
   6          #define uint unsigned int
   7          
   8          sbit relay = P0^4;
   9          sbit buzz = P0^6;
  10          
  11          bit turn_flag = 0;
  12          bit set_flag = 0;
  13          bit blink_flag = 0;
  14          bit led_flag = 0;
  15          bit ad_flag = 0;
  16          bit open_flag = 1;
  17          bit pwm_buff = 0;
  18          
  19          uchar trg,cont;//按键
  20          uchar mode = 1;
  21          uchar set_count;
  22          uchar pwm;
  23          uint dianya;
  24          uint turn_time;
  25          uchar duan[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x00,0x40,0xBF}; //0-9,black,-
  26          uchar disbuff[8];
  27          
  28          void clzbuzz()
  29          {
  30   1              P2 = P2&0x1f|0xa0;
  31   1              buzz = 0;
  32   1              relay = 0;
  33   1              P2 = P2&0x1f;
  34   1      }
  35          
  36          void display()
  37          {
  38   1              static uchar index;
  39   1      
  40   1              P2 = P2&0x1f|0xe0;//选择所有段码
  41   1              P0 = 0xff;//消影
  42   1              P2 = P2&0x1f;
  43   1      
  44   1              P2 = P2&0x1f|0xc0;
  45   1              P0 = 1<<index;
  46   1              P2 = P2&0x1f;
  47   1      
  48   1              P2 = P2&0x1f|0xe0;
  49   1              P0 = ~duan[disbuff[index]];
  50   1              P2 = P2&0x1f;
  51   1      
  52   1              index++;
  53   1              index &= 0x07;
  54   1      }
  55          
C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 2   

  56          void keyscan()
  57          {
  58   1              uchar readdate = P3^0xff;
  59   1              trg = readdate&(readdate^cont);
  60   1              cont = readdate; 
  61   1      }
  62          
  63          void keyfun()
  64          {
  65   1              if(trg == 0x01)
  66   1              {
  67   2                      open_flag = ~open_flag;
  68   2              }
  69   1              if(trg == 0x02)
  70   1              {
  71   2                      set_flag = 1;
  72   2      
  73   2      
  74   2                      if(++set_count == 3)
  75   2                      {
  76   3                              set_flag = 0;
  77   3                              set_count = 0;
  78   3      
  79   3                              switch(mode)
  80   3                              {
  81   4                                      case 1:write_24c02(0x05,turn_time);break;
  82   4                                      case 2:write_24c02(0x02,turn_time);break;                               
  83   4                                      case 3:write_24c02(0x03,turn_time);break;
  84   4                                      case 4:write_24c02(0x04,turn_time);break;       
  85   4                              }
  86   3                      }
  87   2              }
  88   1      
  89   1              if((trg == 0x04)&&(set_count == 1))
  90   1              {
  91   2                       if(++mode == 5)
  92   2                       mode = 4;
  93   2                      switch(mode)
  94   2                              {
  95   3                                      case 1 :turn_time = read_24c02(0x05);break;
  96   3                                      case 2 :turn_time = read_24c02(0x02);break;
  97   3                                      case 3 :turn_time = read_24c02(0x03);break;
  98   3                                      case 4 :turn_time = read_24c02(0x04);break;
  99   3                              }
 100   2              }
 101   1      
 102   1              if((trg == 0x08)&&(set_count == 1))
 103   1              {
 104   2                       if(--mode == 0)
 105   2                       mode = 1;
 106   2                      switch(mode)
 107   2                              {
 108   3                                      case 1 :turn_time = read_24c02(0x05);break;
 109   3                                      case 2 :turn_time = read_24c02(0x02);break;
 110   3                                      case 3 :turn_time = read_24c02(0x03);break;
 111   3                                      case 4 :turn_time = read_24c02(0x04);break;
 112   3                              }
 113   2              }
 114   1      
 115   1              if((trg == 0x04)&&(set_count == 2))
 116   1              {
 117   2                       if(++turn_time == 13)
C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 3   

 118   2                       turn_time = 12;
 119   2              }
 120   1      
 121   1              if((trg == 0x08)&&(set_count == 2))
 122   1              {               
 123   2                       if(--turn_time == 3)
 124   2                       turn_time = 4;
 125   2              }
 126   1      
 127   1              if(cont == 0x08)
 128   1              {
 129   2                      pwm_buff = 1;
 130   2              }
 131   1              else  pwm_buff = 0;
 132   1      }
 133          
 134          void show_num()
 135          {
 136   1              if(set_flag == 1)
 137   1              {
 138   2                      if((blink_flag == 1)&&(set_count == 1))
 139   2                      {
 140   3                              disbuff[0] = 11;
 141   3                              disbuff[1] = mode;
 142   3                              disbuff[2] = 11;
 143   3                              disbuff[3] = 10;
 144   3                              if(turn_time/10 == 0)
 145   3                              disbuff[4] =10;
 146   3                              else
 147   3                              disbuff[4] = turn_time/10;
 148   3                              disbuff[5] = turn_time%10;
 149   3                              disbuff[6] = 0;
 150   3                              disbuff[7] = 0;                         
 151   3                      }
 152   2      
 153   2                      if((blink_flag == 0)&&(set_count == 1))
 154   2                      {
 155   3                              disbuff[0] = 10;
 156   3                              disbuff[1] = 10;
 157   3                              disbuff[2] = 10;
 158   3                              disbuff[3] = 10;
 159   3                              if(turn_time/10 == 0)
 160   3                              disbuff[4] =10;
 161   3                              else
 162   3                              disbuff[4] = turn_time/10;
 163   3                              disbuff[5] = turn_time%10;
 164   3                              disbuff[6] = 0;
 165   3                              disbuff[7] = 0;                         
 166   3                      }
 167   2      
 168   2                      if((blink_flag == 1)&&(set_count == 2))
 169   2                      {
 170   3                              disbuff[0] = 11;
 171   3                              disbuff[1] = mode;
 172   3                              disbuff[2] = 11;
 173   3                              disbuff[3] = 10;
 174   3                              if(turn_time/10 == 0)
 175   3                              disbuff[4] =10;
 176   3                              else
 177   3                              disbuff[4] = turn_time/10;
 178   3                              disbuff[5] = turn_time%10;
 179   3                              disbuff[6] = 0;
C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 4   

 180   3                              disbuff[7] = 0;                 
 181   3                      }
 182   2      
 183   2                      if((blink_flag == 0)&&(set_count == 2))
 184   2                      {
 185   3                              disbuff[0] = 11;
 186   3                              disbuff[1] = mode;
 187   3                              disbuff[2] = 11;
 188   3                              disbuff[3] = 10;
 189   3                              disbuff[4] = 10;
 190   3                              disbuff[5] = 10;
 191   3                              disbuff[6] = 10;
 192   3                              disbuff[7] = 10;                        
 193   3                      }
 194   2              }
 195   1              if(pwm_buff == 1&&set_flag == 0)
 196   1              {
 197   2                      disbuff[0] = 10;
 198   2                      disbuff[1] = 10;
 199   2                      disbuff[2] = 10;
 200   2                      disbuff[3] = 10;
 201   2                      disbuff[4] = 10;
 202   2                      disbuff[5] = 10;
 203   2                      disbuff[6] = 11;
 204   2                      disbuff[7] = pwm;               
 205   2              }
 206   1              else if(set_flag == 0&&pwm_buff == 0)
 207   1              {
 208   2                      disbuff[0] = 10;
 209   2                      disbuff[1] = 10;
 210   2                      disbuff[2] = 10;
 211   2                      disbuff[3] = 10;
 212   2                      disbuff[4] = 10;
 213   2                      disbuff[5] = 10;
 214   2                      disbuff[6] = 10;
 215   2                      disbuff[7] = 10;        
 216   2              }
 217   1      }
 218          
 219          void LED_set()
 220          {
 221   1              static a = 0x01;
 222   1              static b = 0x80;
 223   1              static count_led;
 224   1      
 225   1              if(led_flag == 1)
 226   1              {
 227   2              if(mode == 1)
 228   2              {               
 229   3                      P2 = P2&0x1f|0x80;
 230   3                      P0 = ~a;
 231   3                      P2 = P2&0x1f;
 232   3      
 233   3                      if(turn_flag == 1)
 234   3                      {
 235   4                              a=_crol_(a,1);           //只能左移
 236   4                              turn_flag = 0;
 237   4                      }
 238   3              }
 239   2      
 240   2              if(mode == 2)
 241   2              {
C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 5   

 242   3                      P2 = P2&0x1f|0x80;
 243   3                      P0 = ~b;
 244   3                      P2 = P2&0x1f;
 245   3      
 246   3                      if(turn_flag == 1)
 247   3                      {
 248   4                              b=_cror_(b,1);
 249   4                              turn_flag = 0;
 250   4                      }
 251   3              }
 252   2      
 253   2              if(mode == 3)
 254   2              {
 255   3                      if(turn_flag == 1)
 256   3                      {
 257   4                              turn_flag = 0;
 258   4                              if(++count_led == 5)
 259   4                              {
 260   5                                       count_led = 1;
 261   5                              }
 262   4                      }
 263   3      
 264   3                      if(count_led == 1)
 265   3                      {
 266   4                              P2 = P2&0x1f|0x80;
 267   4                              P0 = ~0x81;
 268   4                              P2 = P2&0x1f;
 269   4                      }
 270   3      
 271   3                      if(count_led == 2)
 272   3                      {
 273   4                              P2 = P2&0x1f|0x80;
 274   4                              P0 = ~0x42;
 275   4                              P2 = P2&0x1f;
 276   4                      }
 277   3      
 278   3                      if(count_led == 3)
 279   3                      {
 280   4                              P2 = P2&0x1f|0x80;
 281   4                              P0 = ~0x24;
 282   4                              P2 = P2&0x1f;
 283   4                      }
 284   3      
 285   3                      if(count_led == 4)
 286   3                      {
 287   4                              P2 = P2&0x1f|0x80;
 288   4                              P0 = ~0x18;
 289   4                              P2 = P2&0x1f;
 290   4                      }       
 291   3              }
 292   2      
 293   2              if(mode == 4)
 294   2              {
 295   3                      if(turn_flag == 1)
 296   3                      {
 297   4                              turn_flag = 0;
 298   4                              if(++count_led == 5)
 299   4                              {
 300   5                                       count_led = 1;
 301   5                              }
 302   4                      }
 303   3      
C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 6   

 304   3                      if(count_led == 1)
 305   3                      {
 306   4                              P2 = P2&0x1f|0x80;
 307   4                              P0 = ~0x18;
 308   4                              P2 = P2&0x1f;
 309   4                      }
 310   3      
 311   3                      if(count_led == 2)
 312   3                      {
 313   4                              P2 = P2&0x1f|0x80;
 314   4                              P0 = ~0x24;
 315   4                              P2 = P2&0x1f;
 316   4                      }
 317   3      
 318   3                      if(count_led == 3)
 319   3                      {
 320   4                              P2 = P2&0x1f|0x80;
 321   4                              P0 = ~0x42;
 322   4                              P2 = P2&0x1f;
 323   4                      }
 324   3      
 325   3                      if(count_led == 4)
 326   3                      {
 327   4                              P2 = P2&0x1f|0x80;
 328   4                              P0 = ~0x81;
 329   4                              P2 = P2&0x1f;
 330   4                      }       
 331   3              }
 332   2              }
 333   1      
 334   1              else if(led_flag == 0)
 335   1              {
 336   2                      P2 = P2&0x1f|0x80;
 337   2                      P0 = 0xff;
 338   2                      P2 = P2&0x1f;
 339   2              }
 340   1      }
 341          void Timer0Init()               //1毫秒@12.000MHz
 342          {
 343   1              AUXR |= 0x80;           //定时器时钟1T模式
 344   1              TMOD &= 0xF0;           //设置定时器模式
 345   1              TL0 = 0x20;             //设置定时初值
 346   1              TH0 = 0xD1;             //设置定时初值
 347   1              TF0 = 0;                //清除TF0标志
 348   1              TR0 = 1;                //定时器0开始计时
 349   1              ET0 = 1;
 350   1              EA = 1;
 351   1      }
 352          
 353          void Timer0() interrupt 1
 354          {
 355   1              static uint count;
 356   1              static uint blink_count;
 357   1              static turn_time_count,pwm_count;
 358   1              keyscan();
 359   1              keyfun();
 360   1              display();
 361   1      
 362   1              if(++blink_count == 800)
 363   1              {
 364   2                      blink_flag = ~blink_flag;
 365   2                      blink_count = 0;
C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 7   

 366   2                      ad_flag = 1;
 367   2              }
 368   1      
 369   1              if(++turn_time_count == 100)
 370   1              {
 371   2                       turn_time_count = 0;
 372   2                       
 373   2                      if(++count >= turn_time&&open_flag == 1)
 374   2                      {
 375   3                              turn_flag = 1;
 376   3                              count = 0;         
 377   3                      }
 378   2              }
 379   1      
 380   1              if(++pwm_count == 10)
 381   1              {
 382   2                      pwm_count = 0; 
 383   2              }
 384   1      
 385   1              if(pwm_count < pwm)
 386   1              led_flag = 1;
 387   1              else if(pwm_count > pwm)led_flag = 0;
 388   1      }
 389          
 390          void main()
 391          {
 392   1              clzbuzz();
 393   1              Timer0Init();
 394   1              init_adc(0x03); //初始化adc
 395   1              turn_time = read_24c02(0x05);
 396   1              while(1)
 397   1              {
 398   2                      show_num();
 399   2                      LED_set();
 400   2      
 401   2                      if(ad_flag == 1)
 402   2                      {
 403   3                              dianya = (uchar)read_adc(0x03);
 404   3                              dianya = dianya/255.0f*99;
 405   3                              ad_flag = 0;
 406   3                              if(dianya<25)
 407   3                              pwm = 1;
 408   3                              if(dianya>=25&&dianya<50)
 409   3                              pwm = 2;
 410   3                              if(dianya>=50&&dianya<75)
 411   3                              pwm = 3;
 412   3                              if(dianya>=75&&dianya<100)
 413   3                              pwm = 4;
 414   3                      }
 415   2              }
 416   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     45    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.00   TXT                                                                   03/12/2022 23:42:55 PAGE 8   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
